{"ast":null,"code":"// A simple linear regression model to predict efficiency based on\n// engine hours, idle hours, and fuel usage.\nconst mlModel = {\n  // These weights are manually determined for this example.\n  // In a real-world scenario, these would be trained on historical data.\n  weights: {\n    engineHours: 0.5,\n    idleHours: -0.8,\n    fuelUsage: -0.2,\n    bias: 50 // Base efficiency score\n  },\n  // Predicts an Efficiency from 0-100\n  predict: data => {\n    const score = mlModel.weights.engineHours * parseFloat(data['Engine Hours/Day'] || 0) + mlModel.weights.idleHours * parseFloat(data['Idle Hours/Day'] || 0) + mlModel.weights.fuelUsage * parseFloat(data['Fuel Usage/Day (Liters)'] || 0) + mlModel.weights.bias;\n\n    // Clamp the score between 0 and 100\n    return Math.max(0, Math.min(100, score)).toFixed(2);\n  }\n};\nexport const addEfficiencyScores = equipmentData => {\n  return equipmentData.map(item => ({\n    ...item,\n    'Efficiency': mlModel.predict(item)\n  }));\n};","map":{"version":3,"names":["mlModel","weights","engineHours","idleHours","fuelUsage","bias","predict","data","score","parseFloat","Math","max","min","toFixed","addEfficiencyScores","equipmentData","map","item"],"sources":["D:/ts/my-dashboard/src/mlService.js"],"sourcesContent":["// A simple linear regression model to predict efficiency based on\r\n// engine hours, idle hours, and fuel usage.\r\nconst mlModel = {\r\n  // These weights are manually determined for this example.\r\n  // In a real-world scenario, these would be trained on historical data.\r\n  weights: {\r\n    engineHours: 0.5,\r\n    idleHours: -0.8,\r\n    fuelUsage: -0.2,\r\n    bias: 50, // Base efficiency score\r\n  },\r\n\r\n  // Predicts an Efficiency from 0-100\r\n  predict: (data) => {\r\n    const score = (\r\n      mlModel.weights.engineHours * parseFloat(data['Engine Hours/Day'] || 0) +\r\n      mlModel.weights.idleHours * parseFloat(data['Idle Hours/Day'] || 0) +\r\n      mlModel.weights.fuelUsage * parseFloat(data['Fuel Usage/Day (Liters)'] || 0) +\r\n      mlModel.weights.bias\r\n    );\r\n\r\n    // Clamp the score between 0 and 100\r\n    return Math.max(0, Math.min(100, score)).toFixed(2);\r\n  },\r\n};\r\n\r\nexport const addEfficiencyScores = (equipmentData) => {\r\n  return equipmentData.map(item => ({\r\n    ...item,\r\n    'Efficiency': mlModel.predict(item),\r\n  }));\r\n};"],"mappings":"AAAA;AACA;AACA,MAAMA,OAAO,GAAG;EACd;EACA;EACAC,OAAO,EAAE;IACPC,WAAW,EAAE,GAAG;IAChBC,SAAS,EAAE,CAAC,GAAG;IACfC,SAAS,EAAE,CAAC,GAAG;IACfC,IAAI,EAAE,EAAE,CAAE;EACZ,CAAC;EAED;EACAC,OAAO,EAAGC,IAAI,IAAK;IACjB,MAAMC,KAAK,GACTR,OAAO,CAACC,OAAO,CAACC,WAAW,GAAGO,UAAU,CAACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GACvEP,OAAO,CAACC,OAAO,CAACE,SAAS,GAAGM,UAAU,CAACF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,GACnEP,OAAO,CAACC,OAAO,CAACG,SAAS,GAAGK,UAAU,CAACF,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,GAC5EP,OAAO,CAACC,OAAO,CAACI,IACjB;;IAED;IACA,OAAOK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,GAAG,EAAEJ,KAAK,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,aAAa,IAAK;EACpD,OAAOA,aAAa,CAACC,GAAG,CAACC,IAAI,KAAK;IAChC,GAAGA,IAAI;IACP,YAAY,EAAEjB,OAAO,CAACM,OAAO,CAACW,IAAI;EACpC,CAAC,CAAC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}