{"ast":null,"code":"var _jsxFileName = \"D:\\\\ts\\\\my-dashboard\\\\src\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Predefined Q&A with suggested questions\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst predefinedQA = [{\n  question: \"How do I log in?\",\n  answer: \"To log in, please enter your username and select your role (User or Provider) on the main login page.\",\n  suggestions: [\"What are the different roles?\", \"What happens if I forget my username?\"]\n}, {\n  question: \"How can I see my current rentals?\",\n  answer: \"On the User Dashboard, you can see your current rentals in the 'Current Rental Details' table. You can also view your past rentals by clicking the 'Show Rental History' button.\",\n  suggestions: [\"How is my efficiency score calculated?\", \"What are total rented hours?\", \"What is an overdue rental?\"]\n}, {\n  question: \"Where can I find the efficiency score of an equipment?\",\n  answer: \"The efficiency score is listed in the main equipment table on both the User and Provider dashboards. It's a key metric to determine a machine's performance.\",\n  suggestions: [\"How is the efficiency score calculated?\", \"What are total rented hours?\", \"What does high idle time mean?\"]\n}, {\n  question: \"How do I filter the equipment list?\",\n  answer: \"On the Provider Dashboard, use the 'Filter & Search' bar to search by Equipment ID, Type, Site ID, or Operator ID. You can also sort the table by clicking on any of the column headers.\",\n  suggestions: [\"What is the Operator Score?\", \"How can I view overdue rentals?\", \"How can I see my available equipment?\"]\n}, {\n  question: \"What is the Operator Score?\",\n  answer: \"The Operator Score is a performance metric for providers, calculated based on an operator's average engine hours, idle hours, and overdue rentals.\",\n  suggestions: [\"How are operators rated?\", \"What is a good Operator Score?\", \"How do I track an operator's performance?\"]\n}, {\n  question: \"What happens if a rental is overdue?\",\n  answer: \"The dashboard automatically flags overdue rentals in red. Overdue machines are those that have passed their planned check-in date without being returned.\",\n  suggestions: [\"Where can I see overdue rentals?\", \"How is the Operator Score affected by overdue rentals?\"]\n}, {\n  question: \"What does high idle time mean?\",\n  answer: \"High idle time indicates that a machine's engine is running, but it is not being used for productive work. This can lead to increased fuel usage and lower efficiency.\",\n  suggestions: [\"What is the Efficiency score based on?\", \"How can I see idle time distribution?\", \"How can I improve machine efficiency?\"]\n}];\nconst Chatbot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [suggestedQuestions, setSuggestedQuestions] = useState([]);\n  const handleOpenChat = () => setIsOpen(!isOpen);\n  const handleSendMessage = event => {\n    event.preventDefault();\n    const question = event.target.elements.message.value.trim();\n    if (!question) return;\n    const userMessage = {\n      sender: 'user',\n      text: question\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setSuggestedQuestions([]);\n    event.target.elements.message.value = '';\n    setTimeout(() => {\n      let botAnswer = \"I'm sorry, I don't have an answer for that. Your question has been forwarded to a human representative.\";\n      let newSuggestions = [];\n      const matchedQA = predefinedQA.find(qa => question.toLowerCase().includes(qa.question.toLowerCase().slice(0, 15)));\n      if (matchedQA) {\n        botAnswer = matchedQA.answer;\n        if (matchedQA.suggestions) {\n          newSuggestions = matchedQA.suggestions;\n        }\n      }\n      const botMessage = {\n        sender: 'bot',\n        text: botAnswer\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setSuggestedQuestions(newSuggestions);\n    }, 1000);\n  };\n  const handlePredefinedQuestion = question => {\n    const fakeEvent = {\n      preventDefault: () => {},\n      target: {\n        elements: {\n          message: {\n            value: question\n          }\n        }\n      }\n    };\n    handleSendMessage(fakeEvent);\n  };\n  const styles = {\n    chatIcon: {\n      position: 'fixed',\n      bottom: '20px',\n      right: '20px',\n      width: '60px',\n      height: '60px',\n      borderRadius: '50%',\n      backgroundColor: '#4299e1',\n      color: 'white',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'pointer',\n      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n      zIndex: 1000\n    },\n    chatWindow: {\n      position: 'fixed',\n      bottom: '90px',\n      right: '20px',\n      width: '350px',\n      height: '450px',\n      backgroundColor: 'white',\n      borderRadius: '10px',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.25)',\n      display: 'flex',\n      flexDirection: 'column',\n      zIndex: 1000,\n      overflow: 'hidden'\n    },\n    chatHeader: {\n      backgroundColor: '#4299e1',\n      color: 'white',\n      padding: '15px',\n      textAlign: 'center',\n      fontWeight: 'bold',\n      position: 'relative'\n    },\n    chatClose: {\n      position: 'absolute',\n      top: '10px',\n      right: '15px',\n      cursor: 'pointer',\n      fontSize: '20px'\n    },\n    chatBody: {\n      flexGrow: 1,\n      padding: '15px',\n      overflowY: 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '10px',\n      backgroundColor: '#f7fafc'\n    },\n    chatMessage: {\n      padding: '10px 15px',\n      borderRadius: '20px',\n      maxWidth: '75%',\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px'\n    },\n    userMessage: {\n      backgroundColor: '#2b6cb0',\n      color: 'white',\n      alignSelf: 'flex-end',\n      borderRadius: '20px 20px 5px 20px'\n    },\n    botMessage: {\n      backgroundColor: '#e2e8f0',\n      color: 'black',\n      alignSelf: 'flex-start',\n      borderRadius: '20px 20px 20px 5px'\n    },\n    chatInputForm: {\n      display: 'flex',\n      padding: '10px',\n      borderTop: '1px solid #e2e8f0',\n      backgroundColor: 'white'\n    },\n    chatInput: {\n      flexGrow: 1,\n      padding: '10px',\n      borderRadius: '20px',\n      border: '1px solid #cbd5e0',\n      outline: 'none'\n    },\n    chatSendButton: {\n      marginLeft: '10px',\n      padding: '10px',\n      borderRadius: '50%',\n      backgroundColor: '#4299e1',\n      color: 'white',\n      border: 'none',\n      cursor: 'pointer',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    chatIntro: {\n      textAlign: 'center',\n      color: '#a0aec0',\n      marginTop: 'auto',\n      marginBottom: 'auto'\n    },\n    predefinedQuestions: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '10px',\n      padding: '15px'\n    },\n    predefinedQuestionButton: {\n      backgroundColor: '#e2e8f0',\n      border: 'none',\n      borderRadius: '10px',\n      padding: '10px',\n      textAlign: 'left',\n      cursor: 'pointer',\n      transition: 'background-color 0.3s'\n    },\n    suggestionsBox: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '8px',\n      padding: '10px 0',\n      borderTop: '1px solid #e2e8f0',\n      marginTop: '10px'\n    },\n    suggestionButton: {\n      backgroundColor: '#e2e8f0',\n      border: 'none',\n      borderRadius: '15px',\n      padding: '8px 12px',\n      textAlign: 'left',\n      cursor: 'pointer',\n      fontSize: '14px',\n      transition: 'background-color 0.3s',\n      alignSelf: 'flex-start'\n    },\n    suggestionHeader: {\n      color: '#718096',\n      fontSize: '12px',\n      fontWeight: 'bold',\n      textTransform: 'uppercase'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatIcon,\n      onClick: handleOpenChat,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-robot\",\n        style: {\n          fontSize: '28px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chatHeader,\n        children: [\"Smart Rental AI Assistant \\uD83E\\uDD16\", /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: handleOpenChat,\n          style: styles.chatClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chatBody,\n        children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chatIntro,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hello! How can I help you today?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginTop: '10px',\n              marginBottom: '10px'\n            },\n            children: \"Here are some topics you can ask me about:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.predefinedQuestions,\n            children: predefinedQA.map((qa, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              style: styles.predefinedQuestionButton,\n              onClick: () => handlePredefinedQuestion(qa.question),\n              children: qa.question\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 29\n        }, this) : messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.chatMessage,\n            ...(msg.sender === 'user' ? styles.userMessage : styles.botMessage)\n          },\n          children: [msg.sender === 'user' ? '🧑‍💻' : '🤖', \" \", msg.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 33\n        }, this)), suggestedQuestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.suggestionsBox,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.suggestionHeader,\n            children: \"Suggested Questions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 33\n          }, this), suggestedQuestions.map((q, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            style: styles.suggestionButton,\n            onClick: () => handlePredefinedQuestion(q),\n            children: q\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        style: styles.chatInputForm,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          placeholder: \"Type a message...\",\n          style: styles.chatInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: styles.chatSendButton,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-paper-plane\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"bEUbHNMxTFvUFqX/4kQmhpKEgfE=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","predefinedQA","question","answer","suggestions","Chatbot","_s","isOpen","setIsOpen","messages","setMessages","suggestedQuestions","setSuggestedQuestions","handleOpenChat","handleSendMessage","event","preventDefault","target","elements","message","value","trim","userMessage","sender","text","prevMessages","setTimeout","botAnswer","newSuggestions","matchedQA","find","qa","toLowerCase","includes","slice","botMessage","handlePredefinedQuestion","fakeEvent","styles","chatIcon","position","bottom","right","width","height","borderRadius","backgroundColor","color","display","justifyContent","alignItems","cursor","boxShadow","zIndex","chatWindow","flexDirection","overflow","chatHeader","padding","textAlign","fontWeight","chatClose","top","fontSize","chatBody","flexGrow","overflowY","gap","chatMessage","maxWidth","alignSelf","chatInputForm","borderTop","chatInput","border","outline","chatSendButton","marginLeft","chatIntro","marginTop","marginBottom","predefinedQuestions","predefinedQuestionButton","transition","suggestionsBox","suggestionButton","suggestionHeader","textTransform","children","style","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","msg","q","onSubmit","type","name","placeholder","_c","$RefreshReg$"],"sources":["D:/ts/my-dashboard/src/Chatbot.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Predefined Q&A with suggested questions\r\nconst predefinedQA = [\r\n    {\r\n        question: \"How do I log in?\",\r\n        answer: \"To log in, please enter your username and select your role (User or Provider) on the main login page.\",\r\n        suggestions: [\"What are the different roles?\", \"What happens if I forget my username?\"]\r\n    },\r\n    {\r\n        question: \"How can I see my current rentals?\",\r\n        answer: \"On the User Dashboard, you can see your current rentals in the 'Current Rental Details' table. You can also view your past rentals by clicking the 'Show Rental History' button.\",\r\n        suggestions: [\"How is my efficiency score calculated?\", \"What are total rented hours?\", \"What is an overdue rental?\"]\r\n    },\r\n    {\r\n        question: \"Where can I find the efficiency score of an equipment?\",\r\n        answer: \"The efficiency score is listed in the main equipment table on both the User and Provider dashboards. It's a key metric to determine a machine's performance.\",\r\n        suggestions: [\"How is the efficiency score calculated?\", \"What are total rented hours?\", \"What does high idle time mean?\"]\r\n    },\r\n    {\r\n        question: \"How do I filter the equipment list?\",\r\n        answer: \"On the Provider Dashboard, use the 'Filter & Search' bar to search by Equipment ID, Type, Site ID, or Operator ID. You can also sort the table by clicking on any of the column headers.\",\r\n        suggestions: [\"What is the Operator Score?\", \"How can I view overdue rentals?\", \"How can I see my available equipment?\"]\r\n    },\r\n    {\r\n        question: \"What is the Operator Score?\",\r\n        answer: \"The Operator Score is a performance metric for providers, calculated based on an operator's average engine hours, idle hours, and overdue rentals.\",\r\n        suggestions: [\"How are operators rated?\", \"What is a good Operator Score?\", \"How do I track an operator's performance?\"]\r\n    },\r\n    {\r\n        question: \"What happens if a rental is overdue?\",\r\n        answer: \"The dashboard automatically flags overdue rentals in red. Overdue machines are those that have passed their planned check-in date without being returned.\",\r\n        suggestions: [\"Where can I see overdue rentals?\", \"How is the Operator Score affected by overdue rentals?\"]\r\n    },\r\n    {\r\n        question: \"What does high idle time mean?\",\r\n        answer: \"High idle time indicates that a machine's engine is running, but it is not being used for productive work. This can lead to increased fuel usage and lower efficiency.\",\r\n        suggestions: [\"What is the Efficiency score based on?\", \"How can I see idle time distribution?\", \"How can I improve machine efficiency?\"]\r\n    }\r\n];\r\n\r\nconst Chatbot = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [suggestedQuestions, setSuggestedQuestions] = useState([]);\r\n\r\n    const handleOpenChat = () => setIsOpen(!isOpen);\r\n\r\n    const handleSendMessage = (event) => {\r\n        event.preventDefault();\r\n        const question = event.target.elements.message.value.trim();\r\n        if (!question) return;\r\n\r\n        const userMessage = { sender: 'user', text: question };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        setSuggestedQuestions([]);\r\n        event.target.elements.message.value = '';\r\n\r\n        setTimeout(() => {\r\n            let botAnswer = \"I'm sorry, I don't have an answer for that. Your question has been forwarded to a human representative.\";\r\n            let newSuggestions = [];\r\n\r\n            const matchedQA = predefinedQA.find(qa => \r\n                question.toLowerCase().includes(qa.question.toLowerCase().slice(0, 15))\r\n            );\r\n\r\n            if (matchedQA) {\r\n                botAnswer = matchedQA.answer;\r\n                if (matchedQA.suggestions) {\r\n                    newSuggestions = matchedQA.suggestions;\r\n                }\r\n            }\r\n\r\n            const botMessage = { sender: 'bot', text: botAnswer };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setSuggestedQuestions(newSuggestions);\r\n        }, 1000);\r\n    };\r\n    \r\n    const handlePredefinedQuestion = (question) => {\r\n        const fakeEvent = {\r\n            preventDefault: () => {},\r\n            target: {\r\n                elements: {\r\n                    message: { value: question }\r\n                }\r\n            }\r\n        };\r\n        handleSendMessage(fakeEvent);\r\n    };\r\n\r\n    const styles = {\r\n        chatIcon: {\r\n            position: 'fixed',\r\n            bottom: '20px',\r\n            right: '20px',\r\n            width: '60px',\r\n            height: '60px',\r\n            borderRadius: '50%',\r\n            backgroundColor: '#4299e1',\r\n            color: 'white',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            cursor: 'pointer',\r\n            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n            zIndex: 1000\r\n        },\r\n        chatWindow: {\r\n            position: 'fixed',\r\n            bottom: '90px',\r\n            right: '20px',\r\n            width: '350px',\r\n            height: '450px',\r\n            backgroundColor: 'white',\r\n            borderRadius: '10px',\r\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.25)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            zIndex: 1000,\r\n            overflow: 'hidden'\r\n        },\r\n        chatHeader: {\r\n            backgroundColor: '#4299e1',\r\n            color: 'white',\r\n            padding: '15px',\r\n            textAlign: 'center',\r\n            fontWeight: 'bold',\r\n            position: 'relative'\r\n        },\r\n        chatClose: {\r\n            position: 'absolute',\r\n            top: '10px',\r\n            right: '15px',\r\n            cursor: 'pointer',\r\n            fontSize: '20px'\r\n        },\r\n        chatBody: {\r\n            flexGrow: 1,\r\n            padding: '15px',\r\n            overflowY: 'auto',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '10px',\r\n            backgroundColor: '#f7fafc'\r\n        },\r\n        chatMessage: {\r\n            padding: '10px 15px',\r\n            borderRadius: '20px',\r\n            maxWidth: '75%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '10px'\r\n        },\r\n        userMessage: {\r\n            backgroundColor: '#2b6cb0',\r\n            color: 'white',\r\n            alignSelf: 'flex-end',\r\n            borderRadius: '20px 20px 5px 20px'\r\n        },\r\n        botMessage: {\r\n            backgroundColor: '#e2e8f0',\r\n            color: 'black',\r\n            alignSelf: 'flex-start',\r\n            borderRadius: '20px 20px 20px 5px'\r\n        },\r\n        chatInputForm: {\r\n            display: 'flex',\r\n            padding: '10px',\r\n            borderTop: '1px solid #e2e8f0',\r\n            backgroundColor: 'white'\r\n        },\r\n        chatInput: {\r\n            flexGrow: 1,\r\n            padding: '10px',\r\n            borderRadius: '20px',\r\n            border: '1px solid #cbd5e0',\r\n            outline: 'none'\r\n        },\r\n        chatSendButton: {\r\n            marginLeft: '10px',\r\n            padding: '10px',\r\n            borderRadius: '50%',\r\n            backgroundColor: '#4299e1',\r\n            color: 'white',\r\n            border: 'none',\r\n            cursor: 'pointer',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        },\r\n        chatIntro: {\r\n            textAlign: 'center',\r\n            color: '#a0aec0',\r\n            marginTop: 'auto',\r\n            marginBottom: 'auto'\r\n        },\r\n        predefinedQuestions: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '10px',\r\n            padding: '15px',\r\n        },\r\n        predefinedQuestionButton: {\r\n            backgroundColor: '#e2e8f0',\r\n            border: 'none',\r\n            borderRadius: '10px',\r\n            padding: '10px',\r\n            textAlign: 'left',\r\n            cursor: 'pointer',\r\n            transition: 'background-color 0.3s'\r\n        },\r\n        suggestionsBox: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: '8px',\r\n            padding: '10px 0',\r\n            borderTop: '1px solid #e2e8f0',\r\n            marginTop: '10px'\r\n        },\r\n        suggestionButton: {\r\n            backgroundColor: '#e2e8f0',\r\n            border: 'none',\r\n            borderRadius: '15px',\r\n            padding: '8px 12px',\r\n            textAlign: 'left',\r\n            cursor: 'pointer',\r\n            fontSize: '14px',\r\n            transition: 'background-color 0.3s',\r\n            alignSelf: 'flex-start'\r\n        },\r\n        suggestionHeader: {\r\n            color: '#718096',\r\n            fontSize: '12px',\r\n            fontWeight: 'bold',\r\n            textTransform: 'uppercase'\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={styles.chatIcon} onClick={handleOpenChat}>\r\n                <i className=\"fas fa-robot\" style={{ fontSize: '28px' }}></i>\r\n            </div>\r\n\r\n            {isOpen && (\r\n                <div style={styles.chatWindow}>\r\n                    <div style={styles.chatHeader}>\r\n                        Smart Rental AI Assistant 🤖\r\n                        <span onClick={handleOpenChat} style={styles.chatClose}>&times;</span>\r\n                    </div>\r\n                    <div style={styles.chatBody}>\r\n                        {messages.length === 0 ? (\r\n                            <div style={styles.chatIntro}>\r\n                                <strong>Hello! How can I help you today?</strong>\r\n                                <p style={{marginTop: '10px', marginBottom: '10px'}}>Here are some topics you can ask me about:</p>\r\n                                <div style={styles.predefinedQuestions}>\r\n                                    {predefinedQA.map((qa, index) => (\r\n                                        <button key={index} style={styles.predefinedQuestionButton} onClick={() => handlePredefinedQuestion(qa.question)}>\r\n                                            {qa.question}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            messages.map((msg, index) => (\r\n                                <div\r\n                                    key={index}\r\n                                    style={{\r\n                                        ...styles.chatMessage,\r\n                                        ...(msg.sender === 'user' ? styles.userMessage : styles.botMessage)\r\n                                    }}\r\n                                >\r\n                                    {msg.sender === 'user' ? '🧑‍💻' : '🤖'} {msg.text}\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                        {suggestedQuestions.length > 0 && (\r\n                            <div style={styles.suggestionsBox}>\r\n                                <div style={styles.suggestionHeader}>Suggested Questions:</div>\r\n                                {suggestedQuestions.map((q, index) => (\r\n                                    <button key={index} style={styles.suggestionButton} onClick={() => handlePredefinedQuestion(q)}>\r\n                                        {q}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <form onSubmit={handleSendMessage} style={styles.chatInputForm}>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"message\"\r\n                            placeholder=\"Type a message...\"\r\n                            style={styles.chatInput}\r\n                        />\r\n                        <button type=\"submit\" style={styles.chatSendButton}>\r\n                            <i className=\"fas fa-paper-plane\"></i>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}